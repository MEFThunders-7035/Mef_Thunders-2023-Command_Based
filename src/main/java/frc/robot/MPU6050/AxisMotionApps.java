package frc.robot.MPU6050;

import static frc.robot.MPU6050.MPU6050Constants.AutoGenerated.*;

import java.util.Arrays;


import static frc.robot.MPU6050.DMPFirmwareConstant.I2CDEVDMPFIRMWARE;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class AxisMotionApps extends MPU6050New implements Gyro{
    private boolean dmpReady = false;
    private boolean dmpInit = false;
    private int dmpPacketSize = 28;

    @Override
    public void close() throws Exception {
        mpu6050.close();
    }

    public AxisMotionApps(I2C.Port port) {
        this(port, 3);
    }

    public AxisMotionApps(I2C.Port port, int attemptAmount) {
        super(port); // mpu.initialize() is called here
        
        if (!isConnected()) {
            System.err.println("MPU6050 not connected! Not initializing DMP!");
            return;
        }
        
        System.out.println("DMP Init");
        // dmpInitialize() in this for loop
        dmpInit = !dmpInitialize(attemptAmount);
        (dmpInit ? System.out: System.err).println("DMP is " + (dmpInit ? "Initilazied" : "Not Initilaized"));
        if (!dmpInit) return; // Should switch to the super class instead of returning but I am too lazy to do that right now.
        
        setXGyroOffset(51);
        setYGyroOffset(8);
        setZGyroOffset(21);
        setXAccelOffset(1150);
        setYAccelOffset(-50);
        setZAccelOffset(1060);
        System.out.println("Current Offstets: " + Arrays.toString(getActiveOffsets()));
        
        System.out.println("Calibrating...");
        calibrateGyro(1);
        calibrateAccel(1);
        
        System.out.println("Calibration Done!");
        System.out.println("Current Offstets: " + Arrays.toString(getActiveOffsets()));
        System.out.println("Enabling DMP...");
        
        dmpReady = !setDMPEnabled(true, attemptAmount); // (!) because setDMPEnabled returns true if aborted.
    }

    public void update() {
        if (!dmpReady) {System.out.println("dmp not ready!"); return;}
        SmartDashboard.putNumber("Fifo Count", getFIFOCount());
        byte[] data = getCurrentFIFOPacket();
        if (data == null) return;
        int[] quat = dmpGetQuaternion(data);
        System.out.println(Arrays.toString(quat));
    }
    
    /**
     * Initializes the DMP.
     * @return Transfer Aborted... false for success, true for aborted.
     */
    public boolean dmpInitialize() { // I am too annoyed to make all these functions, so I am just going to put them all here.
        mpu6050.write(MPU6050_RA_PWR_MGMT_1, 0x80); // Reset Device
        Timer.delay(0.1);
        mpu6050.write(MPU6050_RA_SIGNAL_PATH_RESET, 0b00001100); // Reset all sensors
        Timer.delay(0.1);
        
        setClockSource(MPU6050_CLOCK_PLL_XGYRO); // Set clock source to gyro
        mpu6050.write(MPU6050_RA_INT_ENABLE, 0x00); // Disable all interrupts 
        mpu6050.write(MPU6050_RA_FIFO_EN, 0x00); // Disable FIFO, We will be using the DMP's FIFO
        setFullScaleAccelRange(MPU6050_ACCEL_FS_2); // Set the accelerometer to +/- 2g
        mpu6050.write(MPU6050_RA_SMPLRT_DIV, 0x04); // Set the sample rate to 200Hz
        mpu6050.write(MPU6050_RA_CONFIG, 0x01); // Digital Low Pass Filter (DLPF) Configuration 188HZ
        
        if(writeProgMemoryBlock(I2CDEVDMPFIRMWARE, I2CDEVDMPFIRMWARE.length, 0, 0, true)) return true; // Load DMP Firmware
        
        mpu6050.writeWord(MPU6050_RA_DMP_CFG_1, 0x0400); // DMP Program Start Address
        setFullScaleGyroRange(MPU6050_GYRO_FS_2000); // Set the gyro to +/- 2000 degrees per second (idk why, but it is what the I2C DEV code does)
        mpu6050.write(MPU6050_RA_USER_CTRL, 0xC0); // Enable Fifo and Reset Fifo
        mpu6050.write(MPU6050_RA_INT_ENABLE, 0x02); // RAW_DMP_INT_EN on
        
        return false;
    }

    /**
     * Initializes the DMP.
     * @param tryAmount The amount of times to try to initialize the DMP.
     * @return Transfer Aborted... false for success, true for aborted.
     */
    public boolean dmpInitialize(int tryAmount) {
        System.out.println("At attempt " + tryAmount + " to initialize DMP");
        for (int i = 0; i < tryAmount; i++) {
            if (dmpInitialize()) {
                DriverStation.reportError("DMP Init Failed!", false);
                continue;
            }
            return false;
        }
        return true;
    }

    public boolean setDMPEnabled(boolean enable) {
        if (enable) {
            return mpu6050.write(MPU6050_RA_USER_CTRL, 0x80); // Enable DMP
        }
        else {
            return mpu6050.write(MPU6050_RA_USER_CTRL, 0x00); // Disable DMP
        }
    }

    /**
     * Enables the DMP.
     * @param enable Enable or Disable the DMP.
     * @param tryAmount The amount of times to try to enable the DMP.
     * @return Transfer Aborted... false for success, true for aborted.
     */
    public boolean setDMPEnabled(boolean enable, int tryAmount) {
        for (int i = 0; i < tryAmount; i++) {
            if (setDMPEnabled(enable)) {
                DriverStation.reportError("DMP Enable Failed!", false);
                continue;
            }
            return false;
        }
        return true;
    }
    
    public byte[] getCurrentFIFOPacket() {
        return super.getCurrentFIFOPacket(dmpPacketSize);
    }
    
    public int[] dmpGetQuaternion(byte[] FIFOPacket) {
        int[] data = new int[4];
        data[0] = ((FIFOPacket[0] << 8) | FIFOPacket[1] & 0xFF);
        data[1] = ((FIFOPacket[4] << 8) | FIFOPacket[5] & 0xFF);
        data[2] = ((FIFOPacket[8] << 8) | FIFOPacket[9] & 0xFF);
        data[3] = ((FIFOPacket[12] << 8) | FIFOPacket[13] & 0xFF);
        return data;
    }

    /* GYRO IMPLEMENT */
    @Override
    public void calibrate() {
        calibrateGyro(1);
    }

    @Override
    public void reset() {
        
        //TODO: Set OFFSET function. (maybe use DMP? or create offset variables?)
    }

    @Override
    public double getAngle() {
        //TODO: Get Angle(Trough DMP)
        return 0;
    }

    @Override
    public double getRate() {
        //TODO: Use Calibrated Gyro (Trough DMP)
        return getRawRateZ();
    }
}
